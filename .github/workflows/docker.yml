name: Frontend Docker Build and Push

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
    paths:
      - 'frontend/**'
  pull_request:
    paths:
      - 'frontend/**'

env:
  STAGING_REPO: frontend-staging-m306
  PROD_REPO: frontend-prod-m306

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Generate Docker tags
        id: docker-tags
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          
          # Determine target repository and tag based on trigger
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            ECR_REPOSITORY=$PROD_REPO
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "tags=${ECR_REGISTRY}/${ECR_REPOSITORY}:${VERSION},${ECR_REGISTRY}/${ECR_REPOSITORY}:latest" >> $GITHUB_OUTPUT
          
          # Pull requests - use staging repo with PR number
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            ECR_REPOSITORY=$STAGING_REPO
            PR_NUMBER=$(echo $GITHUB_REF | cut -d '/' -f 3)
            echo "tags=${ECR_REGISTRY}/${ECR_REPOSITORY}:pr-${PR_NUMBER}" >> $GITHUB_OUTPUT
          
          # Main branch - use staging repo
          else
            ECR_REPOSITORY=$STAGING_REPO
            echo "tags=${ECR_REGISTRY}/${ECR_REPOSITORY}:main" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./Dockerfile
          push: true
          tags: ${{ steps.docker-tags.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
